@base <http://example.org/music#> .
@prefix : <http://example.org/music#> .
@prefix dbo: <http://dbpedia.org/ontology/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
# 
# 
# #################################################################
# #
# #    Datatypes
# #
# #################################################################
# 
# 
# http://www.w3.org/2001/XMLSchema#gYear
# 
# 
# 
# #################################################################
# #
# #    Object Properties
# #
# #################################################################
# 
# 
# http://example.org/music#collaboratedWith
# 
# http://example.org/music#hasGenre
# 
# http://example.org/music#includesTrack
# 
# http://example.org/music#influenced
# 
# http://example.org/music#isFromCity
# 
# http://example.org/music#isFromCountry
# 
# http://example.org/music#producedBy
# 
# http://example.org/music#signedTo
# 
# 
# 
# #################################################################
# #
# #    Data properties
# #
# #################################################################
# 
# 
# http://example.org/music#activeEndYear
# 
# http://example.org/music#activeStartYear
# 
# http://example.org/music#albumTitle
# 
# http://example.org/music#artistName
# 
# http://example.org/music#durationInSeconds
# 
# http://example.org/music#genreName
# 
# http://example.org/music#population
# 
# http://example.org/music#releaseYear
# 
# http://example.org/music#trackTitle
# 
# 
# 
# #################################################################
# #
# #    Classes
# #
# #################################################################
# 
# 
# http://dbpedia.org/ontology/Album
# 
# http://dbpedia.org/ontology/City
# 
# http://dbpedia.org/ontology/Country
# 
# http://dbpedia.org/ontology/MusicGenre
# 
# http://dbpedia.org/ontology/MusicalArtist
# 
# http://example.org/music#Album
# 
# http://example.org/music#Artist
# 
# http://example.org/music#City
# 
# http://example.org/music#Country
# 
# http://example.org/music#ElectronicArtist
# 
# http://example.org/music#ElectronicGenre
# 
# http://example.org/music#Genre
# 
# http://example.org/music#HipHopArtist
# 
# http://example.org/music#HipHopGenre
# 
# http://example.org/music#LatinArtist
# 
# http://example.org/music#LatinGenre
# 
# http://example.org/music#PopArtist
# 
# http://example.org/music#PopGenre
# 
# http://example.org/music#RockArtist
# 
# http://example.org/music#RockGenre
# 
# Generated by the OWL API (version 4.5.29.2024-05-13T12:11:03Z) https://github.com/owlcs/owlapi

<music> a owl:Ontology;
  rdfs:comment "An ontology for describing music, artists, genres, and their relationships. Includes hooks to DBpedia.";
  rdfs:label "Music Domain Ontology" .

xsd:gYear a rdfs:Datatype .

:collaboratedWith a owl:ObjectProperty, owl:SymmetricProperty;
  rdfs:domain :Artist;
  rdfs:range :Artist;
  rdfs:label "collaborated with" .

:hasGenre a owl:ObjectProperty;
  rdfs:range :Genre;
  rdfs:label "has genre" .

:includesTrack a owl:ObjectProperty;
  rdfs:label "includes track" .

:influenced a owl:ObjectProperty;
  rdfs:domain :Artist;
  rdfs:range :Artist;
  rdfs:comment "Indicates that one artist influenced another.";
  rdfs:label "influenced" .

:isFromCity a owl:ObjectProperty;
  rdfs:domain :Artist;
  rdfs:range :City;
  rdfs:label "is from city" .

:isFromCountry a owl:ObjectProperty;
  rdfs:domain :Artist;
  rdfs:range :Country;
  rdfs:label "is from country" .

:producedBy a owl:ObjectProperty;
  rdfs:range :Artist;
  rdfs:label "produced by" .

:signedTo a owl:ObjectProperty;
  rdfs:domain :Artist;
  rdfs:label "signed to" .

:activeEndYear a owl:DatatypeProperty;
  rdfs:domain :Artist;
  rdfs:range xsd:gYear;
  rdfs:label "active end year" .

:activeStartYear a owl:DatatypeProperty;
  rdfs:domain :Artist;
  rdfs:range xsd:gYear;
  rdfs:label "active start year" .

:albumTitle a owl:DatatypeProperty;
  rdfs:domain :Album;
  rdfs:range xsd:string;
  rdfs:label "album title" .

:artistName a owl:DatatypeProperty;
  rdfs:domain :Artist;
  rdfs:range xsd:string;
  rdfs:label "artist name" .

:durationInSeconds a owl:DatatypeProperty;
  rdfs:range xsd:positiveInteger;
  rdfs:label "duration in seconds" .

:genreName a owl:DatatypeProperty;
  rdfs:domain :Genre;
  rdfs:range xsd:string;
  rdfs:label "genre name" .

:population a owl:DatatypeProperty;
  rdfs:domain :Country;
  rdfs:range xsd:positiveInteger;
  rdfs:label "population" .

:releaseYear a owl:DatatypeProperty;
  rdfs:range xsd:gYear;
  rdfs:label "release year" .

:trackTitle a owl:DatatypeProperty;
  rdfs:range xsd:string;
  rdfs:label "track title" .

dbo:Album a owl:Class;
  owl:equivalentClass :Album .

dbo:City a owl:Class;
  owl:equivalentClass :City .

dbo:Country a owl:Class;
  owl:equivalentClass :Country .

dbo:MusicGenre a owl:Class;
  owl:equivalentClass :Genre .

dbo:MusicalArtist a owl:Class;
  owl:equivalentClass :Artist .

:Album a owl:Class;
  rdfs:subClassOf _:genid1;
  rdfs:comment "A collection of tracks released by an artist.";
  rdfs:label "Album" .

_:genid1 a owl:Restriction;
  owl:someValuesFrom :Artist;
  owl:onProperty :producedBy .

:Artist a owl:Class;
  rdfs:subClassOf _:genid2;
  rdfs:comment "A musician, band, or creator of music.";
  rdfs:label "Artist" .

_:genid2 a owl:Restriction;
  owl:cardinality "1"^^xsd:nonNegativeInteger;
  owl:onProperty :artistName .

:City a owl:Class;
  rdfs:comment "A city, typically of origin for an artist or a music hub.";
  rdfs:label "City" .

:Country a owl:Class;
  rdfs:comment "A country, typically of origin for an artist.";
  rdfs:label "Country" .

:ElectronicArtist a owl:Class;
  owl:equivalentClass _:genid3;
  rdfs:subClassOf :Artist;
  rdfs:comment "An artist who primarily performs electronic music.";
  rdfs:label "Electronic Artist" .

_:genid3 a owl:Class;
  owl:intersectionOf _:genid6 .

_:genid6 a rdf:List;
  rdf:first :Artist;
  rdf:rest _:genid4 .

_:genid4 a rdf:List;
  rdf:first _:genid5;
  rdf:rest rdf:nil .

_:genid5 a owl:Restriction;
  owl:someValuesFrom :ElectronicGenre;
  owl:onProperty :hasGenre .

:ElectronicGenre a owl:Class;
  rdfs:subClassOf :Genre;
  rdfs:comment "A genre of music that is primarily electronic.";
  rdfs:label "Electronic Genre" .

:Genre a owl:Class;
  rdfs:comment "A category of music (e.g., Rock, Pop, Electronic).";
  rdfs:label "Genre" .

:HipHopArtist a owl:Class;
  owl:equivalentClass _:genid7;
  rdfs:subClassOf :Artist;
  rdfs:comment "An artist who primarily performs hip hop music.";
  rdfs:label "Hip Hop Artist" .

_:genid7 a owl:Class;
  owl:intersectionOf _:genid10 .

_:genid10 a rdf:List;
  rdf:first :Artist;
  rdf:rest _:genid8 .

_:genid8 a rdf:List;
  rdf:first _:genid9;
  rdf:rest rdf:nil .

_:genid9 a owl:Restriction;
  owl:someValuesFrom :HipHopGenre;
  owl:onProperty :hasGenre .

:HipHopGenre a owl:Class;
  rdfs:subClassOf :Genre;
  rdfs:comment "A genre of music that is part of hip hop culture.";
  rdfs:label "Hip Hop Genre" .

:LatinArtist a owl:Class;
  owl:equivalentClass _:genid11;
  rdfs:subClassOf :Artist;
  rdfs:comment "An artist who primarily performs Latin music.";
  rdfs:label "Latin Artist" .

_:genid11 a owl:Class;
  owl:intersectionOf _:genid14 .

_:genid14 a rdf:List;
  rdf:first :Artist;
  rdf:rest _:genid12 .

_:genid12 a rdf:List;
  rdf:first _:genid13;
  rdf:rest rdf:nil .

_:genid13 a owl:Restriction;
  owl:someValuesFrom :LatinGenre;
  owl:onProperty :hasGenre .

:LatinGenre a owl:Class;
  rdfs:subClassOf :Genre;
  rdfs:comment "A genre of music that originates from Latin America.";
  rdfs:label "Latin Genre" .

:PopArtist a owl:Class;
  owl:equivalentClass _:genid15;
  rdfs:subClassOf :Artist;
  rdfs:comment "An artist who primarily performs pop music.";
  rdfs:label "Pop Artist" .

_:genid15 a owl:Class;
  owl:intersectionOf _:genid18 .

_:genid18 a rdf:List;
  rdf:first :Artist;
  rdf:rest _:genid16 .

_:genid16 a rdf:List;
  rdf:first _:genid17;
  rdf:rest rdf:nil .

_:genid17 a owl:Restriction;
  owl:someValuesFrom :PopGenre;
  owl:onProperty :hasGenre .

:PopGenre a owl:Class;
  rdfs:subClassOf :Genre;
  rdfs:comment "A genre of music that is popular and mainstream.";
  rdfs:label "Pop Genre" .

:RockArtist a owl:Class;
  owl:equivalentClass _:genid19;
  rdfs:subClassOf :Artist;
  rdfs:comment "An artist who primarily performs rock music.";
  rdfs:label "Rock Artist" .

_:genid19 a owl:Class;
  owl:intersectionOf _:genid22 .

_:genid22 a rdf:List;
  rdf:first :Artist;
  rdf:rest _:genid20 .

_:genid20 a rdf:List;
  rdf:first _:genid21;
  rdf:rest rdf:nil .

_:genid21 a owl:Restriction;
  owl:someValuesFrom :RockGenre;
  owl:onProperty :hasGenre .

:RockGenre a owl:Class;
  rdfs:subClassOf :Genre;
  rdfs:comment "A genre of music that is part of rock music.";
  rdfs:label "Rock Genre" .
  
# GlobalArtist class declaration
:GlobalArtist rdf:type owl:Class ;
    rdfs:label "Global Artist" ;
    rdfs:comment "An artist who has achieved global recognition and success." ;
    rdfs:subClassOf :Artist .

# Artists with very high streams (10+ billion) are GlobalArtists
:GlobalArtist owl:equivalentClass [
    rdf:type owl:Class ;
    owl:intersectionOf (
        :Artist
        [
    rdf:type owl:Restriction ;
            owl:onProperty :totalStreams ;
            owl:someValuesFrom [
                rdf:type rdfs:Datatype ;
                owl:onDatatype xsd:long ;
                owl:withRestrictions (
                    [
                        xsd:minInclusive "10000000000"^^xsd:long
                    ]
                )
            ]
        ]
    )
] .
